// Decompiled with JetBrains decompiler
// Type: Cryptography.ECDSA.Internal.Secp256K1.Scalar
// Assembly: PenisWallet, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3646752A-0D99-4B0A-A992-CA4468257D9B
// Assembly location: C:\Users\1\Desktop\somp3\PenisWallet.dll

using System;
using System.Collections.Generic;
using System.Linq;

namespace Cryptography.ECDSA.Internal.Secp256K1
{
  internal class Scalar
  {
    private const uint N0 = 3493216577;
    private const uint N1 = 3218235020;
    private const uint N2 = 2940772411;
    private const uint N3 = 3132021990;
    private const uint N4 = 4294967294;
    private const uint N5 = 4294967295;
    private const uint N6 = 4294967295;
    private const uint N7 = 4294967295;
    private const uint NC0 = 801750719;
    private const uint NC1 = 1076732275;
    private const uint NC2 = 1354194884;
    private const uint NC3 = 1162945305;
    private const uint NC4 = 1;
    private const uint NH0 = 1746608288;
    private const uint NH1 = 3756601158;
    private const uint NH2 = 1470386205;
    private const uint NH3 = 1566010995;
    private const uint NH4 = 4294967295;
    private const uint NH5 = 4294967295;
    private const uint NH6 = 4294967295;
    private const uint NH7 = 2147483647;
    public readonly uint[] D;

    public Scalar()
    {
      this.D = new uint[8];
    }

    public Scalar(uint[] arr)
    {
      this.D = arr;
    }

    public Scalar(Scalar other)
    {
      this.D = new uint[other.D.Length];
      Array.Copy((Array) other.D, (Array) this.D, other.D.Length);
    }

    public Scalar Clone()
    {
      return new Scalar(this);
    }

    public static bool IsZero(Scalar r)
    {
      return ((IEnumerable<uint>) r.D).All<uint>((Func<uint, bool>) (t => t == 0U));
    }

    public static void Mul(Scalar r, Scalar a, Scalar b)
    {
      uint[] l = new uint[16];
      Scalar.Mul512(l, a, b);
      Scalar.Reduce512(r, l);
    }

    public static bool Add(Scalar r, Scalar a, Scalar b)
    {
      ulong num1 = (ulong) a.D[0] + (ulong) b.D[0];
      r.D[0] = (uint) (num1 & (ulong) uint.MaxValue);
      ulong num2 = (num1 >> 32) + ((ulong) a.D[1] + (ulong) b.D[1]);
      r.D[1] = (uint) (num2 & (ulong) uint.MaxValue);
      ulong num3 = (num2 >> 32) + ((ulong) a.D[2] + (ulong) b.D[2]);
      r.D[2] = (uint) (num3 & (ulong) uint.MaxValue);
      ulong num4 = (num3 >> 32) + ((ulong) a.D[3] + (ulong) b.D[3]);
      r.D[3] = (uint) (num4 & (ulong) uint.MaxValue);
      ulong num5 = (num4 >> 32) + ((ulong) a.D[4] + (ulong) b.D[4]);
      r.D[4] = (uint) (num5 & (ulong) uint.MaxValue);
      ulong num6 = (num5 >> 32) + ((ulong) a.D[5] + (ulong) b.D[5]);
      r.D[5] = (uint) (num6 & (ulong) uint.MaxValue);
      ulong num7 = (num6 >> 32) + ((ulong) a.D[6] + (ulong) b.D[6]);
      r.D[6] = (uint) (num7 & (ulong) uint.MaxValue);
      ulong num8 = (num7 >> 32) + ((ulong) a.D[7] + (ulong) b.D[7]);
      r.D[7] = (uint) (num8 & (ulong) uint.MaxValue);
      bool isOverflow = num8 >> 32 > 0UL || Scalar.CheckOverflow(r);
      Scalar.Reduce(r, isOverflow);
      return isOverflow;
    }

    private static void Mul512(uint[] l, Scalar a, Scalar b)
    {
      uint num1 = 0;
      uint num2 = 0;
      int num3 = 0;
      long num4 = (long) a.D[0] * (long) b.D[0];
      uint num5 = (uint) ((ulong) num4 >> 32);
      uint num6 = (uint) num4;
      uint num7 = num1 + num6;
      uint num8 = num5 + (num7 < num6 ? 1U : 0U);
      uint num9 = num2 + num8;
      l[0] = num7;
      uint num10 = num9;
      uint num11 = 0;
      long num12 = (long) a.D[0] * (long) b.D[1];
      uint num13 = (uint) ((ulong) num12 >> 32);
      uint num14 = (uint) num12;
      uint num15 = num10 + num14;
      uint num16 = num13 + (num15 < num14 ? 1U : 0U);
      uint num17 = num11 + num16;
      int num18 = num17 < num16 ? 1 : 0;
      int num19 = num3 + num18;
      long num20 = (long) a.D[1] * (long) b.D[0];
      uint num21 = (uint) ((ulong) num20 >> 32);
      uint num22 = (uint) num20;
      uint num23 = num15 + num22;
      uint num24 = num21 + (num23 < num22 ? 1U : 0U);
      uint num25 = num17 + num24;
      int num26 = num25 < num24 ? 1 : 0;
      int num27 = num19 + num26;
      l[1] = num23;
      uint num28 = num25;
      uint num29 = (uint) num27;
      int num30 = 0;
      long num31 = (long) a.D[0] * (long) b.D[2];
      uint num32 = (uint) ((ulong) num31 >> 32);
      uint num33 = (uint) num31;
      uint num34 = num28 + num33;
      uint num35 = num32 + (num34 < num33 ? 1U : 0U);
      uint num36 = num29 + num35;
      int num37 = num36 < num35 ? 1 : 0;
      int num38 = num30 + num37;
      long num39 = (long) a.D[1] * (long) b.D[1];
      uint num40 = (uint) ((ulong) num39 >> 32);
      uint num41 = (uint) num39;
      uint num42 = num34 + num41;
      uint num43 = num40 + (num42 < num41 ? 1U : 0U);
      uint num44 = num36 + num43;
      int num45 = num44 < num43 ? 1 : 0;
      int num46 = num38 + num45;
      long num47 = (long) a.D[2] * (long) b.D[0];
      uint num48 = (uint) ((ulong) num47 >> 32);
      uint num49 = (uint) num47;
      uint num50 = num42 + num49;
      uint num51 = num48 + (num50 < num49 ? 1U : 0U);
      uint num52 = num44 + num51;
      int num53 = num52 < num51 ? 1 : 0;
      int num54 = num46 + num53;
      l[2] = num50;
      uint num55 = num52;
      uint num56 = (uint) num54;
      int num57 = 0;
      long num58 = (long) a.D[0] * (long) b.D[3];
      uint num59 = (uint) ((ulong) num58 >> 32);
      uint num60 = (uint) num58;
      uint num61 = num55 + num60;
      uint num62 = num59 + (num61 < num60 ? 1U : 0U);
      uint num63 = num56 + num62;
      int num64 = num63 < num62 ? 1 : 0;
      int num65 = num57 + num64;
      long num66 = (long) a.D[1] * (long) b.D[2];
      uint num67 = (uint) ((ulong) num66 >> 32);
      uint num68 = (uint) num66;
      uint num69 = num61 + num68;
      uint num70 = num67 + (num69 < num68 ? 1U : 0U);
      uint num71 = num63 + num70;
      int num72 = num71 < num70 ? 1 : 0;
      int num73 = num65 + num72;
      long num74 = (long) a.D[2] * (long) b.D[1];
      uint num75 = (uint) ((ulong) num74 >> 32);
      uint num76 = (uint) num74;
      uint num77 = num69 + num76;
      uint num78 = num75 + (num77 < num76 ? 1U : 0U);
      uint num79 = num71 + num78;
      int num80 = num79 < num78 ? 1 : 0;
      int num81 = num73 + num80;
      long num82 = (long) a.D[3] * (long) b.D[0];
      uint num83 = (uint) ((ulong) num82 >> 32);
      uint num84 = (uint) num82;
      uint num85 = num77 + num84;
      uint num86 = num83 + (num85 < num84 ? 1U : 0U);
      uint num87 = num79 + num86;
      int num88 = num87 < num86 ? 1 : 0;
      int num89 = num81 + num88;
      l[3] = num85;
      uint num90 = num87;
      uint num91 = (uint) num89;
      int num92 = 0;
      long num93 = (long) a.D[0] * (long) b.D[4];
      uint num94 = (uint) ((ulong) num93 >> 32);
      uint num95 = (uint) num93;
      uint num96 = num90 + num95;
      uint num97 = num94 + (num96 < num95 ? 1U : 0U);
      uint num98 = num91 + num97;
      int num99 = num98 < num97 ? 1 : 0;
      int num100 = num92 + num99;
      long num101 = (long) a.D[1] * (long) b.D[3];
      uint num102 = (uint) ((ulong) num101 >> 32);
      uint num103 = (uint) num101;
      uint num104 = num96 + num103;
      uint num105 = num102 + (num104 < num103 ? 1U : 0U);
      uint num106 = num98 + num105;
      int num107 = num106 < num105 ? 1 : 0;
      int num108 = num100 + num107;
      long num109 = (long) a.D[2] * (long) b.D[2];
      uint num110 = (uint) ((ulong) num109 >> 32);
      uint num111 = (uint) num109;
      uint num112 = num104 + num111;
      uint num113 = num110 + (num112 < num111 ? 1U : 0U);
      uint num114 = num106 + num113;
      int num115 = num114 < num113 ? 1 : 0;
      int num116 = num108 + num115;
      long num117 = (long) a.D[3] * (long) b.D[1];
      uint num118 = (uint) ((ulong) num117 >> 32);
      uint num119 = (uint) num117;
      uint num120 = num112 + num119;
      uint num121 = num118 + (num120 < num119 ? 1U : 0U);
      uint num122 = num114 + num121;
      int num123 = num122 < num121 ? 1 : 0;
      int num124 = num116 + num123;
      long num125 = (long) a.D[4] * (long) b.D[0];
      uint num126 = (uint) ((ulong) num125 >> 32);
      uint num127 = (uint) num125;
      uint num128 = num120 + num127;
      uint num129 = num126 + (num128 < num127 ? 1U : 0U);
      uint num130 = num122 + num129;
      int num131 = num130 < num129 ? 1 : 0;
      int num132 = num124 + num131;
      l[4] = num128;
      uint num133 = num130;
      uint num134 = (uint) num132;
      int num135 = 0;
      long num136 = (long) a.D[0] * (long) b.D[5];
      uint num137 = (uint) ((ulong) num136 >> 32);
      uint num138 = (uint) num136;
      uint num139 = num133 + num138;
      uint num140 = num137 + (num139 < num138 ? 1U : 0U);
      uint num141 = num134 + num140;
      int num142 = num141 < num140 ? 1 : 0;
      int num143 = num135 + num142;
      long num144 = (long) a.D[1] * (long) b.D[4];
      uint num145 = (uint) ((ulong) num144 >> 32);
      uint num146 = (uint) num144;
      uint num147 = num139 + num146;
      uint num148 = num145 + (num147 < num146 ? 1U : 0U);
      uint num149 = num141 + num148;
      int num150 = num149 < num148 ? 1 : 0;
      int num151 = num143 + num150;
      long num152 = (long) a.D[2] * (long) b.D[3];
      uint num153 = (uint) ((ulong) num152 >> 32);
      uint num154 = (uint) num152;
      uint num155 = num147 + num154;
      uint num156 = num153 + (num155 < num154 ? 1U : 0U);
      uint num157 = num149 + num156;
      int num158 = num157 < num156 ? 1 : 0;
      int num159 = num151 + num158;
      long num160 = (long) a.D[3] * (long) b.D[2];
      uint num161 = (uint) ((ulong) num160 >> 32);
      uint num162 = (uint) num160;
      uint num163 = num155 + num162;
      uint num164 = num161 + (num163 < num162 ? 1U : 0U);
      uint num165 = num157 + num164;
      int num166 = num165 < num164 ? 1 : 0;
      int num167 = num159 + num166;
      long num168 = (long) a.D[4] * (long) b.D[1];
      uint num169 = (uint) ((ulong) num168 >> 32);
      uint num170 = (uint) num168;
      uint num171 = num163 + num170;
      uint num172 = num169 + (num171 < num170 ? 1U : 0U);
      uint num173 = num165 + num172;
      int num174 = num173 < num172 ? 1 : 0;
      int num175 = num167 + num174;
      long num176 = (long) a.D[5] * (long) b.D[0];
      uint num177 = (uint) ((ulong) num176 >> 32);
      uint num178 = (uint) num176;
      uint num179 = num171 + num178;
      uint num180 = num177 + (num179 < num178 ? 1U : 0U);
      uint num181 = num173 + num180;
      int num182 = num181 < num180 ? 1 : 0;
      int num183 = num175 + num182;
      l[5] = num179;
      uint num184 = num181;
      uint num185 = (uint) num183;
      int num186 = 0;
      long num187 = (long) a.D[0] * (long) b.D[6];
      uint num188 = (uint) ((ulong) num187 >> 32);
      uint num189 = (uint) num187;
      uint num190 = num184 + num189;
      uint num191 = num188 + (num190 < num189 ? 1U : 0U);
      uint num192 = num185 + num191;
      int num193 = num192 < num191 ? 1 : 0;
      int num194 = num186 + num193;
      long num195 = (long) a.D[1] * (long) b.D[5];
      uint num196 = (uint) ((ulong) num195 >> 32);
      uint num197 = (uint) num195;
      uint num198 = num190 + num197;
      uint num199 = num196 + (num198 < num197 ? 1U : 0U);
      uint num200 = num192 + num199;
      int num201 = num200 < num199 ? 1 : 0;
      int num202 = num194 + num201;
      long num203 = (long) a.D[2] * (long) b.D[4];
      uint num204 = (uint) ((ulong) num203 >> 32);
      uint num205 = (uint) num203;
      uint num206 = num198 + num205;
      uint num207 = num204 + (num206 < num205 ? 1U : 0U);
      uint num208 = num200 + num207;
      int num209 = num208 < num207 ? 1 : 0;
      int num210 = num202 + num209;
      long num211 = (long) a.D[3] * (long) b.D[3];
      uint num212 = (uint) ((ulong) num211 >> 32);
      uint num213 = (uint) num211;
      uint num214 = num206 + num213;
      uint num215 = num212 + (num214 < num213 ? 1U : 0U);
      uint num216 = num208 + num215;
      int num217 = num216 < num215 ? 1 : 0;
      int num218 = num210 + num217;
      long num219 = (long) a.D[4] * (long) b.D[2];
      uint num220 = (uint) ((ulong) num219 >> 32);
      uint num221 = (uint) num219;
      uint num222 = num214 + num221;
      uint num223 = num220 + (num222 < num221 ? 1U : 0U);
      uint num224 = num216 + num223;
      int num225 = num224 < num223 ? 1 : 0;
      int num226 = num218 + num225;
      long num227 = (long) a.D[5] * (long) b.D[1];
      uint num228 = (uint) ((ulong) num227 >> 32);
      uint num229 = (uint) num227;
      uint num230 = num222 + num229;
      uint num231 = num228 + (num230 < num229 ? 1U : 0U);
      uint num232 = num224 + num231;
      int num233 = num232 < num231 ? 1 : 0;
      int num234 = num226 + num233;
      long num235 = (long) a.D[6] * (long) b.D[0];
      uint num236 = (uint) ((ulong) num235 >> 32);
      uint num237 = (uint) num235;
      uint num238 = num230 + num237;
      uint num239 = num236 + (num238 < num237 ? 1U : 0U);
      uint num240 = num232 + num239;
      int num241 = num240 < num239 ? 1 : 0;
      int num242 = num234 + num241;
      l[6] = num238;
      uint num243 = num240;
      uint num244 = (uint) num242;
      int num245 = 0;
      long num246 = (long) a.D[0] * (long) b.D[7];
      uint num247 = (uint) ((ulong) num246 >> 32);
      uint num248 = (uint) num246;
      uint num249 = num243 + num248;
      uint num250 = num247 + (num249 < num248 ? 1U : 0U);
      uint num251 = num244 + num250;
      int num252 = num251 < num250 ? 1 : 0;
      int num253 = num245 + num252;
      long num254 = (long) a.D[1] * (long) b.D[6];
      uint num255 = (uint) ((ulong) num254 >> 32);
      uint num256 = (uint) num254;
      uint num257 = num249 + num256;
      uint num258 = num255 + (num257 < num256 ? 1U : 0U);
      uint num259 = num251 + num258;
      int num260 = num259 < num258 ? 1 : 0;
      int num261 = num253 + num260;
      long num262 = (long) a.D[2] * (long) b.D[5];
      uint num263 = (uint) ((ulong) num262 >> 32);
      uint num264 = (uint) num262;
      uint num265 = num257 + num264;
      uint num266 = num263 + (num265 < num264 ? 1U : 0U);
      uint num267 = num259 + num266;
      int num268 = num267 < num266 ? 1 : 0;
      int num269 = num261 + num268;
      long num270 = (long) a.D[3] * (long) b.D[4];
      uint num271 = (uint) ((ulong) num270 >> 32);
      uint num272 = (uint) num270;
      uint num273 = num265 + num272;
      uint num274 = num271 + (num273 < num272 ? 1U : 0U);
      uint num275 = num267 + num274;
      int num276 = num275 < num274 ? 1 : 0;
      int num277 = num269 + num276;
      long num278 = (long) a.D[4] * (long) b.D[3];
      uint num279 = (uint) ((ulong) num278 >> 32);
      uint num280 = (uint) num278;
      uint num281 = num273 + num280;
      uint num282 = num279 + (num281 < num280 ? 1U : 0U);
      uint num283 = num275 + num282;
      int num284 = num283 < num282 ? 1 : 0;
      int num285 = num277 + num284;
      long num286 = (long) a.D[5] * (long) b.D[2];
      uint num287 = (uint) ((ulong) num286 >> 32);
      uint num288 = (uint) num286;
      uint num289 = num281 + num288;
      uint num290 = num287 + (num289 < num288 ? 1U : 0U);
      uint num291 = num283 + num290;
      int num292 = num291 < num290 ? 1 : 0;
      int num293 = num285 + num292;
      long num294 = (long) a.D[6] * (long) b.D[1];
      uint num295 = (uint) ((ulong) num294 >> 32);
      uint num296 = (uint) num294;
      uint num297 = num289 + num296;
      uint num298 = num295 + (num297 < num296 ? 1U : 0U);
      uint num299 = num291 + num298;
      int num300 = num299 < num298 ? 1 : 0;
      int num301 = num293 + num300;
      long num302 = (long) a.D[7] * (long) b.D[0];
      uint num303 = (uint) ((ulong) num302 >> 32);
      uint num304 = (uint) num302;
      uint num305 = num297 + num304;
      uint num306 = num303 + (num305 < num304 ? 1U : 0U);
      uint num307 = num299 + num306;
      int num308 = num307 < num306 ? 1 : 0;
      int num309 = num301 + num308;
      l[7] = num305;
      uint num310 = num307;
      uint num311 = (uint) num309;
      int num312 = 0;
      long num313 = (long) a.D[1] * (long) b.D[7];
      uint num314 = (uint) ((ulong) num313 >> 32);
      uint num315 = (uint) num313;
      uint num316 = num310 + num315;
      uint num317 = num314 + (num316 < num315 ? 1U : 0U);
      uint num318 = num311 + num317;
      int num319 = num318 < num317 ? 1 : 0;
      int num320 = num312 + num319;
      long num321 = (long) a.D[2] * (long) b.D[6];
      uint num322 = (uint) ((ulong) num321 >> 32);
      uint num323 = (uint) num321;
      uint num324 = num316 + num323;
      uint num325 = num322 + (num324 < num323 ? 1U : 0U);
      uint num326 = num318 + num325;
      int num327 = num326 < num325 ? 1 : 0;
      int num328 = num320 + num327;
      long num329 = (long) a.D[3] * (long) b.D[5];
      uint num330 = (uint) ((ulong) num329 >> 32);
      uint num331 = (uint) num329;
      uint num332 = num324 + num331;
      uint num333 = num330 + (num332 < num331 ? 1U : 0U);
      uint num334 = num326 + num333;
      int num335 = num334 < num333 ? 1 : 0;
      int num336 = num328 + num335;
      long num337 = (long) a.D[4] * (long) b.D[4];
      uint num338 = (uint) ((ulong) num337 >> 32);
      uint num339 = (uint) num337;
      uint num340 = num332 + num339;
      uint num341 = num338 + (num340 < num339 ? 1U : 0U);
      uint num342 = num334 + num341;
      int num343 = num342 < num341 ? 1 : 0;
      int num344 = num336 + num343;
      long num345 = (long) a.D[5] * (long) b.D[3];
      uint num346 = (uint) ((ulong) num345 >> 32);
      uint num347 = (uint) num345;
      uint num348 = num340 + num347;
      uint num349 = num346 + (num348 < num347 ? 1U : 0U);
      uint num350 = num342 + num349;
      int num351 = num350 < num349 ? 1 : 0;
      int num352 = num344 + num351;
      long num353 = (long) a.D[6] * (long) b.D[2];
      uint num354 = (uint) ((ulong) num353 >> 32);
      uint num355 = (uint) num353;
      uint num356 = num348 + num355;
      uint num357 = num354 + (num356 < num355 ? 1U : 0U);
      uint num358 = num350 + num357;
      int num359 = num358 < num357 ? 1 : 0;
      int num360 = num352 + num359;
      long num361 = (long) a.D[7] * (long) b.D[1];
      uint num362 = (uint) ((ulong) num361 >> 32);
      uint num363 = (uint) num361;
      uint num364 = num356 + num363;
      uint num365 = num362 + (num364 < num363 ? 1U : 0U);
      uint num366 = num358 + num365;
      int num367 = num366 < num365 ? 1 : 0;
      int num368 = num360 + num367;
      l[8] = num364;
      uint num369 = num366;
      uint num370 = (uint) num368;
      int num371 = 0;
      long num372 = (long) a.D[2] * (long) b.D[7];
      uint num373 = (uint) ((ulong) num372 >> 32);
      uint num374 = (uint) num372;
      uint num375 = num369 + num374;
      uint num376 = num373 + (num375 < num374 ? 1U : 0U);
      uint num377 = num370 + num376;
      int num378 = num377 < num376 ? 1 : 0;
      int num379 = num371 + num378;
      long num380 = (long) a.D[3] * (long) b.D[6];
      uint num381 = (uint) ((ulong) num380 >> 32);
      uint num382 = (uint) num380;
      uint num383 = num375 + num382;
      uint num384 = num381 + (num383 < num382 ? 1U : 0U);
      uint num385 = num377 + num384;
      int num386 = num385 < num384 ? 1 : 0;
      int num387 = num379 + num386;
      long num388 = (long) a.D[4] * (long) b.D[5];
      uint num389 = (uint) ((ulong) num388 >> 32);
      uint num390 = (uint) num388;
      uint num391 = num383 + num390;
      uint num392 = num389 + (num391 < num390 ? 1U : 0U);
      uint num393 = num385 + num392;
      int num394 = num393 < num392 ? 1 : 0;
      int num395 = num387 + num394;
      long num396 = (long) a.D[5] * (long) b.D[4];
      uint num397 = (uint) ((ulong) num396 >> 32);
      uint num398 = (uint) num396;
      uint num399 = num391 + num398;
      uint num400 = num397 + (num399 < num398 ? 1U : 0U);
      uint num401 = num393 + num400;
      int num402 = num401 < num400 ? 1 : 0;
      int num403 = num395 + num402;
      long num404 = (long) a.D[6] * (long) b.D[3];
      uint num405 = (uint) ((ulong) num404 >> 32);
      uint num406 = (uint) num404;
      uint num407 = num399 + num406;
      uint num408 = num405 + (num407 < num406 ? 1U : 0U);
      uint num409 = num401 + num408;
      int num410 = num409 < num408 ? 1 : 0;
      int num411 = num403 + num410;
      long num412 = (long) a.D[7] * (long) b.D[2];
      uint num413 = (uint) ((ulong) num412 >> 32);
      uint num414 = (uint) num412;
      uint num415 = num407 + num414;
      uint num416 = num413 + (num415 < num414 ? 1U : 0U);
      uint num417 = num409 + num416;
      int num418 = num417 < num416 ? 1 : 0;
      int num419 = num411 + num418;
      l[9] = num415;
      uint num420 = num417;
      uint num421 = (uint) num419;
      int num422 = 0;
      long num423 = (long) a.D[3] * (long) b.D[7];
      uint num424 = (uint) ((ulong) num423 >> 32);
      uint num425 = (uint) num423;
      uint num426 = num420 + num425;
      uint num427 = num424 + (num426 < num425 ? 1U : 0U);
      uint num428 = num421 + num427;
      int num429 = num428 < num427 ? 1 : 0;
      int num430 = num422 + num429;
      long num431 = (long) a.D[4] * (long) b.D[6];
      uint num432 = (uint) ((ulong) num431 >> 32);
      uint num433 = (uint) num431;
      uint num434 = num426 + num433;
      uint num435 = num432 + (num434 < num433 ? 1U : 0U);
      uint num436 = num428 + num435;
      int num437 = num436 < num435 ? 1 : 0;
      int num438 = num430 + num437;
      long num439 = (long) a.D[5] * (long) b.D[5];
      uint num440 = (uint) ((ulong) num439 >> 32);
      uint num441 = (uint) num439;
      uint num442 = num434 + num441;
      uint num443 = num440 + (num442 < num441 ? 1U : 0U);
      uint num444 = num436 + num443;
      int num445 = num444 < num443 ? 1 : 0;
      int num446 = num438 + num445;
      long num447 = (long) a.D[6] * (long) b.D[4];
      uint num448 = (uint) ((ulong) num447 >> 32);
      uint num449 = (uint) num447;
      uint num450 = num442 + num449;
      uint num451 = num448 + (num450 < num449 ? 1U : 0U);
      uint num452 = num444 + num451;
      int num453 = num452 < num451 ? 1 : 0;
      int num454 = num446 + num453;
      long num455 = (long) a.D[7] * (long) b.D[3];
      uint num456 = (uint) ((ulong) num455 >> 32);
      uint num457 = (uint) num455;
      uint num458 = num450 + num457;
      uint num459 = num456 + (num458 < num457 ? 1U : 0U);
      uint num460 = num452 + num459;
      int num461 = num460 < num459 ? 1 : 0;
      int num462 = num454 + num461;
      l[10] = num458;
      uint num463 = num460;
      uint num464 = (uint) num462;
      int num465 = 0;
      long num466 = (long) a.D[4] * (long) b.D[7];
      uint num467 = (uint) ((ulong) num466 >> 32);
      uint num468 = (uint) num466;
      uint num469 = num463 + num468;
      uint num470 = num467 + (num469 < num468 ? 1U : 0U);
      uint num471 = num464 + num470;
      int num472 = num471 < num470 ? 1 : 0;
      int num473 = num465 + num472;
      long num474 = (long) a.D[5] * (long) b.D[6];
      uint num475 = (uint) ((ulong) num474 >> 32);
      uint num476 = (uint) num474;
      uint num477 = num469 + num476;
      uint num478 = num475 + (num477 < num476 ? 1U : 0U);
      uint num479 = num471 + num478;
      int num480 = num479 < num478 ? 1 : 0;
      int num481 = num473 + num480;
      long num482 = (long) a.D[6] * (long) b.D[5];
      uint num483 = (uint) ((ulong) num482 >> 32);
      uint num484 = (uint) num482;
      uint num485 = num477 + num484;
      uint num486 = num483 + (num485 < num484 ? 1U : 0U);
      uint num487 = num479 + num486;
      int num488 = num487 < num486 ? 1 : 0;
      int num489 = num481 + num488;
      long num490 = (long) a.D[7] * (long) b.D[4];
      uint num491 = (uint) ((ulong) num490 >> 32);
      uint num492 = (uint) num490;
      uint num493 = num485 + num492;
      uint num494 = num491 + (num493 < num492 ? 1U : 0U);
      uint num495 = num487 + num494;
      int num496 = num495 < num494 ? 1 : 0;
      int num497 = num489 + num496;
      l[11] = num493;
      uint num498 = num495;
      uint num499 = (uint) num497;
      int num500 = 0;
      long num501 = (long) a.D[5] * (long) b.D[7];
      uint num502 = (uint) ((ulong) num501 >> 32);
      uint num503 = (uint) num501;
      uint num504 = num498 + num503;
      uint num505 = num502 + (num504 < num503 ? 1U : 0U);
      uint num506 = num499 + num505;
      int num507 = num506 < num505 ? 1 : 0;
      int num508 = num500 + num507;
      long num509 = (long) a.D[6] * (long) b.D[6];
      uint num510 = (uint) ((ulong) num509 >> 32);
      uint num511 = (uint) num509;
      uint num512 = num504 + num511;
      uint num513 = num510 + (num512 < num511 ? 1U : 0U);
      uint num514 = num506 + num513;
      int num515 = num514 < num513 ? 1 : 0;
      int num516 = num508 + num515;
      long num517 = (long) a.D[7] * (long) b.D[5];
      uint num518 = (uint) ((ulong) num517 >> 32);
      uint num519 = (uint) num517;
      uint num520 = num512 + num519;
      uint num521 = num518 + (num520 < num519 ? 1U : 0U);
      uint num522 = num514 + num521;
      int num523 = num522 < num521 ? 1 : 0;
      int num524 = num516 + num523;
      l[12] = num520;
      uint num525 = num522;
      uint num526 = (uint) num524;
      int num527 = 0;
      long num528 = (long) a.D[6] * (long) b.D[7];
      uint num529 = (uint) ((ulong) num528 >> 32);
      uint num530 = (uint) num528;
      uint num531 = num525 + num530;
      uint num532 = num529 + (num531 < num530 ? 1U : 0U);
      uint num533 = num526 + num532;
      int num534 = num533 < num532 ? 1 : 0;
      int num535 = num527 + num534;
      long num536 = (long) a.D[7] * (long) b.D[6];
      uint num537 = (uint) ((ulong) num536 >> 32);
      uint num538 = (uint) num536;
      uint num539 = num531 + num538;
      uint num540 = num537 + (num539 < num538 ? 1U : 0U);
      uint num541 = num533 + num540;
      int num542 = num541 < num540 ? 1 : 0;
      int num543 = num535 + num542;
      l[13] = num539;
      uint num544 = num541;
      uint num545 = (uint) num543;
      long num546 = (long) a.D[7] * (long) b.D[7];
      uint num547 = (uint) ((ulong) num546 >> 32);
      uint num548 = (uint) num546;
      uint num549 = num544 + num548;
      uint num550 = num547 + (num549 < num548 ? 1U : 0U);
      uint num551 = num545 + num550;
      l[14] = num549;
      uint num552 = num551;
      l[15] = num552;
    }

    private static void Reduce512(Scalar r, uint[] l)
    {
      uint num1 = l[8];
      uint num2 = l[9];
      uint num3 = l[10];
      uint num4 = l[11];
      uint num5 = l[12];
      uint num6 = l[13];
      uint num7 = l[14];
      uint num8 = l[15];
      uint num9 = l[0];
      uint num10 = 0;
      int num11 = 0;
      long num12 = (long) num1 * 801750719L;
      uint num13 = (uint) ((ulong) num12 >> 32);
      uint num14 = (uint) num12;
      uint num15 = num9 + num14;
      uint num16 = num13 + (num15 < num14 ? 1U : 0U);
      uint num17 = num10 + num16;
      uint num18 = num15;
      uint num19 = num17;
      uint num20 = 0;
      uint num21 = num19 + l[1];
      uint num22 = num20 + (num21 < l[1] ? 1U : 0U);
      long num23 = (long) num2 * 801750719L;
      uint num24 = (uint) ((ulong) num23 >> 32);
      uint num25 = (uint) num23;
      uint num26 = num21 + num25;
      uint num27 = num24 + (num26 < num25 ? 1U : 0U);
      uint num28 = num22 + num27;
      int num29 = num28 < num27 ? 1 : 0;
      int num30 = num11 + num29;
      long num31 = (long) num1 * 1076732275L;
      uint num32 = (uint) ((ulong) num31 >> 32);
      uint num33 = (uint) num31;
      uint num34 = num26 + num33;
      uint num35 = num32 + (num34 < num33 ? 1U : 0U);
      uint num36 = num28 + num35;
      int num37 = num36 < num35 ? 1 : 0;
      int num38 = num30 + num37;
      uint num39 = num34;
      uint num40 = num36;
      uint num41 = (uint) num38;
      int num42 = 0;
      uint num43 = num40 + l[2];
      uint num44 = num43 < l[2] ? 1U : 0U;
      uint num45 = num41 + num44;
      int num46 = num45 < num44 ? 1 : 0;
      int num47 = num42 + num46;
      long num48 = (long) num3 * 801750719L;
      uint num49 = (uint) ((ulong) num48 >> 32);
      uint num50 = (uint) num48;
      uint num51 = num43 + num50;
      uint num52 = num49 + (num51 < num50 ? 1U : 0U);
      uint num53 = num45 + num52;
      int num54 = num53 < num52 ? 1 : 0;
      int num55 = num47 + num54;
      long num56 = (long) num2 * 1076732275L;
      uint num57 = (uint) ((ulong) num56 >> 32);
      uint num58 = (uint) num56;
      uint num59 = num51 + num58;
      uint num60 = num57 + (num59 < num58 ? 1U : 0U);
      uint num61 = num53 + num60;
      int num62 = num61 < num60 ? 1 : 0;
      int num63 = num55 + num62;
      long num64 = (long) num1 * 1354194884L;
      uint num65 = (uint) ((ulong) num64 >> 32);
      uint num66 = (uint) num64;
      uint num67 = num59 + num66;
      uint num68 = num65 + (num67 < num66 ? 1U : 0U);
      uint num69 = num61 + num68;
      int num70 = num69 < num68 ? 1 : 0;
      int num71 = num63 + num70;
      uint num72 = num67;
      uint num73 = num69;
      uint num74 = (uint) num71;
      int num75 = 0;
      uint num76 = num73 + l[3];
      uint num77 = num76 < l[3] ? 1U : 0U;
      uint num78 = num74 + num77;
      int num79 = num78 < num77 ? 1 : 0;
      int num80 = num75 + num79;
      long num81 = (long) num4 * 801750719L;
      uint num82 = (uint) ((ulong) num81 >> 32);
      uint num83 = (uint) num81;
      uint num84 = num76 + num83;
      uint num85 = num82 + (num84 < num83 ? 1U : 0U);
      uint num86 = num78 + num85;
      int num87 = num86 < num85 ? 1 : 0;
      int num88 = num80 + num87;
      long num89 = (long) num3 * 1076732275L;
      uint num90 = (uint) ((ulong) num89 >> 32);
      uint num91 = (uint) num89;
      uint num92 = num84 + num91;
      uint num93 = num90 + (num92 < num91 ? 1U : 0U);
      uint num94 = num86 + num93;
      int num95 = num94 < num93 ? 1 : 0;
      int num96 = num88 + num95;
      long num97 = (long) num2 * 1354194884L;
      uint num98 = (uint) ((ulong) num97 >> 32);
      uint num99 = (uint) num97;
      uint num100 = num92 + num99;
      uint num101 = num98 + (num100 < num99 ? 1U : 0U);
      uint num102 = num94 + num101;
      int num103 = num102 < num101 ? 1 : 0;
      int num104 = num96 + num103;
      long num105 = (long) num1 * 1162945305L;
      uint num106 = (uint) ((ulong) num105 >> 32);
      uint num107 = (uint) num105;
      uint num108 = num100 + num107;
      uint num109 = num106 + (num108 < num107 ? 1U : 0U);
      uint num110 = num102 + num109;
      int num111 = num110 < num109 ? 1 : 0;
      int num112 = num104 + num111;
      uint num113 = num108;
      uint num114 = num110;
      uint num115 = (uint) num112;
      int num116 = 0;
      uint num117 = num114 + l[4];
      uint num118 = num117 < l[4] ? 1U : 0U;
      uint num119 = num115 + num118;
      int num120 = num119 < num118 ? 1 : 0;
      int num121 = num116 + num120;
      long num122 = (long) num5 * 801750719L;
      uint num123 = (uint) ((ulong) num122 >> 32);
      uint num124 = (uint) num122;
      uint num125 = num117 + num124;
      uint num126 = num123 + (num125 < num124 ? 1U : 0U);
      uint num127 = num119 + num126;
      int num128 = num127 < num126 ? 1 : 0;
      int num129 = num121 + num128;
      long num130 = (long) num4 * 1076732275L;
      uint num131 = (uint) ((ulong) num130 >> 32);
      uint num132 = (uint) num130;
      uint num133 = num125 + num132;
      uint num134 = num131 + (num133 < num132 ? 1U : 0U);
      uint num135 = num127 + num134;
      int num136 = num135 < num134 ? 1 : 0;
      int num137 = num129 + num136;
      long num138 = (long) num3 * 1354194884L;
      uint num139 = (uint) ((ulong) num138 >> 32);
      uint num140 = (uint) num138;
      uint num141 = num133 + num140;
      uint num142 = num139 + (num141 < num140 ? 1U : 0U);
      uint num143 = num135 + num142;
      int num144 = num143 < num142 ? 1 : 0;
      int num145 = num137 + num144;
      long num146 = (long) num2 * 1162945305L;
      uint num147 = (uint) ((ulong) num146 >> 32);
      uint num148 = (uint) num146;
      uint num149 = num141 + num148;
      uint num150 = num147 + (num149 < num148 ? 1U : 0U);
      uint num151 = num143 + num150;
      int num152 = num151 < num150 ? 1 : 0;
      int num153 = num145 + num152;
      uint num154 = num149 + num1;
      uint num155 = num154 < num1 ? 1U : 0U;
      uint num156 = num151 + num155;
      int num157 = num156 < num155 ? 1 : 0;
      int num158 = num153 + num157;
      uint num159 = num154;
      uint num160 = num156;
      uint num161 = (uint) num158;
      int num162 = 0;
      uint num163 = num160 + l[5];
      uint num164 = num163 < l[5] ? 1U : 0U;
      uint num165 = num161 + num164;
      int num166 = num165 < num164 ? 1 : 0;
      int num167 = num162 + num166;
      long num168 = (long) num6 * 801750719L;
      uint num169 = (uint) ((ulong) num168 >> 32);
      uint num170 = (uint) num168;
      uint num171 = num163 + num170;
      uint num172 = num169 + (num171 < num170 ? 1U : 0U);
      uint num173 = num165 + num172;
      int num174 = num173 < num172 ? 1 : 0;
      int num175 = num167 + num174;
      long num176 = (long) num5 * 1076732275L;
      uint num177 = (uint) ((ulong) num176 >> 32);
      uint num178 = (uint) num176;
      uint num179 = num171 + num178;
      uint num180 = num177 + (num179 < num178 ? 1U : 0U);
      uint num181 = num173 + num180;
      int num182 = num181 < num180 ? 1 : 0;
      int num183 = num175 + num182;
      long num184 = (long) num4 * 1354194884L;
      uint num185 = (uint) ((ulong) num184 >> 32);
      uint num186 = (uint) num184;
      uint num187 = num179 + num186;
      uint num188 = num185 + (num187 < num186 ? 1U : 0U);
      uint num189 = num181 + num188;
      int num190 = num189 < num188 ? 1 : 0;
      int num191 = num183 + num190;
      long num192 = (long) num3 * 1162945305L;
      uint num193 = (uint) ((ulong) num192 >> 32);
      uint num194 = (uint) num192;
      uint num195 = num187 + num194;
      uint num196 = num193 + (num195 < num194 ? 1U : 0U);
      uint num197 = num189 + num196;
      int num198 = num197 < num196 ? 1 : 0;
      int num199 = num191 + num198;
      uint num200 = num195 + num2;
      uint num201 = num200 < num2 ? 1U : 0U;
      uint num202 = num197 + num201;
      int num203 = num202 < num201 ? 1 : 0;
      int num204 = num199 + num203;
      uint num205 = num200;
      uint num206 = num202;
      uint num207 = (uint) num204;
      int num208 = 0;
      uint num209 = num206 + l[6];
      uint num210 = num209 < l[6] ? 1U : 0U;
      uint num211 = num207 + num210;
      int num212 = num211 < num210 ? 1 : 0;
      int num213 = num208 + num212;
      long num214 = (long) num7 * 801750719L;
      uint num215 = (uint) ((ulong) num214 >> 32);
      uint num216 = (uint) num214;
      uint num217 = num209 + num216;
      uint num218 = num215 + (num217 < num216 ? 1U : 0U);
      uint num219 = num211 + num218;
      int num220 = num219 < num218 ? 1 : 0;
      int num221 = num213 + num220;
      long num222 = (long) num6 * 1076732275L;
      uint num223 = (uint) ((ulong) num222 >> 32);
      uint num224 = (uint) num222;
      uint num225 = num217 + num224;
      uint num226 = num223 + (num225 < num224 ? 1U : 0U);
      uint num227 = num219 + num226;
      int num228 = num227 < num226 ? 1 : 0;
      int num229 = num221 + num228;
      long num230 = (long) num5 * 1354194884L;
      uint num231 = (uint) ((ulong) num230 >> 32);
      uint num232 = (uint) num230;
      uint num233 = num225 + num232;
      uint num234 = num231 + (num233 < num232 ? 1U : 0U);
      uint num235 = num227 + num234;
      int num236 = num235 < num234 ? 1 : 0;
      int num237 = num229 + num236;
      long num238 = (long) num4 * 1162945305L;
      uint num239 = (uint) ((ulong) num238 >> 32);
      uint num240 = (uint) num238;
      uint num241 = num233 + num240;
      uint num242 = num239 + (num241 < num240 ? 1U : 0U);
      uint num243 = num235 + num242;
      int num244 = num243 < num242 ? 1 : 0;
      int num245 = num237 + num244;
      uint num246 = num241 + num3;
      uint num247 = num246 < num3 ? 1U : 0U;
      uint num248 = num243 + num247;
      int num249 = num248 < num247 ? 1 : 0;
      int num250 = num245 + num249;
      uint num251 = num246;
      uint num252 = num248;
      uint num253 = (uint) num250;
      int num254 = 0;
      uint num255 = num252 + l[7];
      uint num256 = num255 < l[7] ? 1U : 0U;
      uint num257 = num253 + num256;
      int num258 = num257 < num256 ? 1 : 0;
      int num259 = num254 + num258;
      long num260 = (long) num8 * 801750719L;
      uint num261 = (uint) ((ulong) num260 >> 32);
      uint num262 = (uint) num260;
      uint num263 = num255 + num262;
      uint num264 = num261 + (num263 < num262 ? 1U : 0U);
      uint num265 = num257 + num264;
      int num266 = num265 < num264 ? 1 : 0;
      int num267 = num259 + num266;
      long num268 = (long) num7 * 1076732275L;
      uint num269 = (uint) ((ulong) num268 >> 32);
      uint num270 = (uint) num268;
      uint num271 = num263 + num270;
      uint num272 = num269 + (num271 < num270 ? 1U : 0U);
      uint num273 = num265 + num272;
      int num274 = num273 < num272 ? 1 : 0;
      int num275 = num267 + num274;
      long num276 = (long) num6 * 1354194884L;
      uint num277 = (uint) ((ulong) num276 >> 32);
      uint num278 = (uint) num276;
      uint num279 = num271 + num278;
      uint num280 = num277 + (num279 < num278 ? 1U : 0U);
      uint num281 = num273 + num280;
      int num282 = num281 < num280 ? 1 : 0;
      int num283 = num275 + num282;
      long num284 = (long) num5 * 1162945305L;
      uint num285 = (uint) ((ulong) num284 >> 32);
      uint num286 = (uint) num284;
      uint num287 = num279 + num286;
      uint num288 = num285 + (num287 < num286 ? 1U : 0U);
      uint num289 = num281 + num288;
      int num290 = num289 < num288 ? 1 : 0;
      int num291 = num283 + num290;
      uint num292 = num287 + num4;
      uint num293 = num292 < num4 ? 1U : 0U;
      uint num294 = num289 + num293;
      int num295 = num294 < num293 ? 1 : 0;
      int num296 = num291 + num295;
      uint num297 = num292;
      uint num298 = num294;
      uint num299 = (uint) num296;
      int num300 = 0;
      long num301 = (long) num8 * 1076732275L;
      uint num302 = (uint) ((ulong) num301 >> 32);
      uint num303 = (uint) num301;
      uint num304 = num298 + num303;
      uint num305 = num302 + (num304 < num303 ? 1U : 0U);
      uint num306 = num299 + num305;
      int num307 = num306 < num305 ? 1 : 0;
      int num308 = num300 + num307;
      long num309 = (long) num7 * 1354194884L;
      uint num310 = (uint) ((ulong) num309 >> 32);
      uint num311 = (uint) num309;
      uint num312 = num304 + num311;
      uint num313 = num310 + (num312 < num311 ? 1U : 0U);
      uint num314 = num306 + num313;
      int num315 = num314 < num313 ? 1 : 0;
      int num316 = num308 + num315;
      long num317 = (long) num6 * 1162945305L;
      uint num318 = (uint) ((ulong) num317 >> 32);
      uint num319 = (uint) num317;
      uint num320 = num312 + num319;
      uint num321 = num318 + (num320 < num319 ? 1U : 0U);
      uint num322 = num314 + num321;
      int num323 = num322 < num321 ? 1 : 0;
      int num324 = num316 + num323;
      uint num325 = num320 + num5;
      uint num326 = num325 < num5 ? 1U : 0U;
      uint num327 = num322 + num326;
      int num328 = num327 < num326 ? 1 : 0;
      int num329 = num324 + num328;
      uint num330 = num325;
      uint num331 = num327;
      uint num332 = (uint) num329;
      int num333 = 0;
      long num334 = (long) num8 * 1354194884L;
      uint num335 = (uint) ((ulong) num334 >> 32);
      uint num336 = (uint) num334;
      uint num337 = num331 + num336;
      uint num338 = num335 + (num337 < num336 ? 1U : 0U);
      uint num339 = num332 + num338;
      int num340 = num339 < num338 ? 1 : 0;
      int num341 = num333 + num340;
      long num342 = (long) num7 * 1162945305L;
      uint num343 = (uint) ((ulong) num342 >> 32);
      uint num344 = (uint) num342;
      uint num345 = num337 + num344;
      uint num346 = num343 + (num345 < num344 ? 1U : 0U);
      uint num347 = num339 + num346;
      int num348 = num347 < num346 ? 1 : 0;
      int num349 = num341 + num348;
      uint num350 = num345 + num6;
      uint num351 = num350 < num6 ? 1U : 0U;
      uint num352 = num347 + num351;
      int num353 = num352 < num351 ? 1 : 0;
      int num354 = num349 + num353;
      uint num355 = num350;
      uint num356 = num352;
      uint num357 = (uint) num354;
      int num358 = 0;
      long num359 = (long) num8 * 1162945305L;
      uint num360 = (uint) ((ulong) num359 >> 32);
      uint num361 = (uint) num359;
      uint num362 = num356 + num361;
      uint num363 = num360 + (num362 < num361 ? 1U : 0U);
      uint num364 = num357 + num363;
      int num365 = num364 < num363 ? 1 : 0;
      int num366 = num358 + num365;
      uint num367 = num362 + num7;
      uint num368 = num367 < num7 ? 1U : 0U;
      uint num369 = num364 + num368;
      int num370 = num369 < num368 ? 1 : 0;
      int num371 = num366 + num370;
      uint num372 = num367;
      uint num373 = num369;
      uint num374 = (uint) num371;
      uint num375 = num373 + num8;
      uint num376 = num374 + (num375 < num8 ? 1U : 0U);
      uint num377 = num375;
      uint num378 = num376;
      uint num379 = 0;
      uint num380 = num378;
      uint num381 = num18;
      uint num382 = 0;
      int num383 = 0;
      long num384 = (long) num330 * 801750719L;
      uint num385 = (uint) ((ulong) num384 >> 32);
      uint num386 = (uint) num384;
      uint num387 = num381 + num386;
      uint num388 = num385 + (num387 < num386 ? 1U : 0U);
      uint num389 = num382 + num388;
      uint num390 = num387;
      uint num391 = num389;
      uint num392 = 0;
      uint num393 = num391 + num39;
      uint num394 = num392 + (num393 < num39 ? 1U : 0U);
      long num395 = (long) num355 * 801750719L;
      uint num396 = (uint) ((ulong) num395 >> 32);
      uint num397 = (uint) num395;
      uint num398 = num393 + num397;
      uint num399 = num396 + (num398 < num397 ? 1U : 0U);
      uint num400 = num394 + num399;
      int num401 = num400 < num399 ? 1 : 0;
      int num402 = num383 + num401;
      long num403 = (long) num330 * 1076732275L;
      uint num404 = (uint) ((ulong) num403 >> 32);
      uint num405 = (uint) num403;
      uint num406 = num398 + num405;
      uint num407 = num404 + (num406 < num405 ? 1U : 0U);
      uint num408 = num400 + num407;
      int num409 = num408 < num407 ? 1 : 0;
      int num410 = num402 + num409;
      uint num411 = num406;
      uint num412 = num408;
      uint num413 = (uint) num410;
      int num414 = 0;
      uint num415 = num412 + num72;
      uint num416 = num415 < num72 ? 1U : 0U;
      uint num417 = num413 + num416;
      int num418 = num417 < num416 ? 1 : 0;
      int num419 = num414 + num418;
      long num420 = (long) num372 * 801750719L;
      uint num421 = (uint) ((ulong) num420 >> 32);
      uint num422 = (uint) num420;
      uint num423 = num415 + num422;
      uint num424 = num421 + (num423 < num422 ? 1U : 0U);
      uint num425 = num417 + num424;
      int num426 = num425 < num424 ? 1 : 0;
      int num427 = num419 + num426;
      long num428 = (long) num355 * 1076732275L;
      uint num429 = (uint) ((ulong) num428 >> 32);
      uint num430 = (uint) num428;
      uint num431 = num423 + num430;
      uint num432 = num429 + (num431 < num430 ? 1U : 0U);
      uint num433 = num425 + num432;
      int num434 = num433 < num432 ? 1 : 0;
      int num435 = num427 + num434;
      long num436 = (long) num330 * 1354194884L;
      uint num437 = (uint) ((ulong) num436 >> 32);
      uint num438 = (uint) num436;
      uint num439 = num431 + num438;
      uint num440 = num437 + (num439 < num438 ? 1U : 0U);
      uint num441 = num433 + num440;
      int num442 = num441 < num440 ? 1 : 0;
      int num443 = num435 + num442;
      uint num444 = num439;
      uint num445 = num441;
      uint num446 = (uint) num443;
      int num447 = 0;
      uint num448 = num445 + num113;
      uint num449 = num448 < num113 ? 1U : 0U;
      uint num450 = num446 + num449;
      int num451 = num450 < num449 ? 1 : 0;
      int num452 = num447 + num451;
      long num453 = (long) num377 * 801750719L;
      uint num454 = (uint) ((ulong) num453 >> 32);
      uint num455 = (uint) num453;
      uint num456 = num448 + num455;
      uint num457 = num454 + (num456 < num455 ? 1U : 0U);
      uint num458 = num450 + num457;
      int num459 = num458 < num457 ? 1 : 0;
      int num460 = num452 + num459;
      long num461 = (long) num372 * 1076732275L;
      uint num462 = (uint) ((ulong) num461 >> 32);
      uint num463 = (uint) num461;
      uint num464 = num456 + num463;
      uint num465 = num462 + (num464 < num463 ? 1U : 0U);
      uint num466 = num458 + num465;
      int num467 = num466 < num465 ? 1 : 0;
      int num468 = num460 + num467;
      long num469 = (long) num355 * 1354194884L;
      uint num470 = (uint) ((ulong) num469 >> 32);
      uint num471 = (uint) num469;
      uint num472 = num464 + num471;
      uint num473 = num470 + (num472 < num471 ? 1U : 0U);
      uint num474 = num466 + num473;
      int num475 = num474 < num473 ? 1 : 0;
      int num476 = num468 + num475;
      long num477 = (long) num330 * 1162945305L;
      uint num478 = (uint) ((ulong) num477 >> 32);
      uint num479 = (uint) num477;
      uint num480 = num472 + num479;
      uint num481 = num478 + (num480 < num479 ? 1U : 0U);
      uint num482 = num474 + num481;
      int num483 = num482 < num481 ? 1 : 0;
      int num484 = num476 + num483;
      uint num485 = num480;
      uint num486 = num482;
      uint num487 = (uint) num484;
      int num488 = 0;
      uint num489 = num486 + num159;
      uint num490 = num489 < num159 ? 1U : 0U;
      uint num491 = num487 + num490;
      int num492 = num491 < num490 ? 1 : 0;
      int num493 = num488 + num492;
      long num494 = (long) num380 * 801750719L;
      uint num495 = (uint) ((ulong) num494 >> 32);
      uint num496 = (uint) num494;
      uint num497 = num489 + num496;
      uint num498 = num495 + (num497 < num496 ? 1U : 0U);
      uint num499 = num491 + num498;
      int num500 = num499 < num498 ? 1 : 0;
      int num501 = num493 + num500;
      long num502 = (long) num377 * 1076732275L;
      uint num503 = (uint) ((ulong) num502 >> 32);
      uint num504 = (uint) num502;
      uint num505 = num497 + num504;
      uint num506 = num503 + (num505 < num504 ? 1U : 0U);
      uint num507 = num499 + num506;
      int num508 = num507 < num506 ? 1 : 0;
      int num509 = num501 + num508;
      long num510 = (long) num372 * 1354194884L;
      uint num511 = (uint) ((ulong) num510 >> 32);
      uint num512 = (uint) num510;
      uint num513 = num505 + num512;
      uint num514 = num511 + (num513 < num512 ? 1U : 0U);
      uint num515 = num507 + num514;
      int num516 = num515 < num514 ? 1 : 0;
      int num517 = num509 + num516;
      long num518 = (long) num355 * 1162945305L;
      uint num519 = (uint) ((ulong) num518 >> 32);
      uint num520 = (uint) num518;
      uint num521 = num513 + num520;
      uint num522 = num519 + (num521 < num520 ? 1U : 0U);
      uint num523 = num515 + num522;
      int num524 = num523 < num522 ? 1 : 0;
      int num525 = num517 + num524;
      uint num526 = num521 + num330;
      uint num527 = num526 < num330 ? 1U : 0U;
      uint num528 = num523 + num527;
      int num529 = num528 < num527 ? 1 : 0;
      int num530 = num525 + num529;
      uint num531 = num526;
      uint num532 = num528;
      uint num533 = (uint) num530;
      int num534 = 0;
      uint num535 = num532 + num205;
      uint num536 = num535 < num205 ? 1U : 0U;
      uint num537 = num533 + num536;
      int num538 = num537 < num536 ? 1 : 0;
      int num539 = num534 + num538;
      long num540 = (long) num380 * 1076732275L;
      uint num541 = (uint) ((ulong) num540 >> 32);
      uint num542 = (uint) num540;
      uint num543 = num535 + num542;
      uint num544 = num541 + (num543 < num542 ? 1U : 0U);
      uint num545 = num537 + num544;
      int num546 = num545 < num544 ? 1 : 0;
      int num547 = num539 + num546;
      long num548 = (long) num377 * 1354194884L;
      uint num549 = (uint) ((ulong) num548 >> 32);
      uint num550 = (uint) num548;
      uint num551 = num543 + num550;
      uint num552 = num549 + (num551 < num550 ? 1U : 0U);
      uint num553 = num545 + num552;
      int num554 = num553 < num552 ? 1 : 0;
      int num555 = num547 + num554;
      long num556 = (long) num372 * 1162945305L;
      uint num557 = (uint) ((ulong) num556 >> 32);
      uint num558 = (uint) num556;
      uint num559 = num551 + num558;
      uint num560 = num557 + (num559 < num558 ? 1U : 0U);
      uint num561 = num553 + num560;
      int num562 = num561 < num560 ? 1 : 0;
      int num563 = num555 + num562;
      uint num564 = num559 + num355;
      uint num565 = num564 < num355 ? 1U : 0U;
      uint num566 = num561 + num565;
      int num567 = num566 < num565 ? 1 : 0;
      int num568 = num563 + num567;
      uint num569 = num564;
      uint num570 = num566;
      uint num571 = (uint) num568;
      int num572 = 0;
      uint num573 = num570 + num251;
      uint num574 = num573 < num251 ? 1U : 0U;
      uint num575 = num571 + num574;
      int num576 = num575 < num574 ? 1 : 0;
      int num577 = num572 + num576;
      long num578 = (long) num380 * 1354194884L;
      uint num579 = (uint) ((ulong) num578 >> 32);
      uint num580 = (uint) num578;
      uint num581 = num573 + num580;
      uint num582 = num579 + (num581 < num580 ? 1U : 0U);
      uint num583 = num575 + num582;
      int num584 = num583 < num582 ? 1 : 0;
      int num585 = num577 + num584;
      long num586 = (long) num377 * 1162945305L;
      uint num587 = (uint) ((ulong) num586 >> 32);
      uint num588 = (uint) num586;
      uint num589 = num581 + num588;
      uint num590 = num587 + (num589 < num588 ? 1U : 0U);
      uint num591 = num583 + num590;
      int num592 = num591 < num590 ? 1 : 0;
      int num593 = num585 + num592;
      uint num594 = num589 + num372;
      uint num595 = num594 < num372 ? 1U : 0U;
      uint num596 = num591 + num595;
      int num597 = num596 < num595 ? 1 : 0;
      int num598 = num593 + num597;
      uint num599 = num594;
      uint num600 = num596;
      uint num601 = (uint) num598;
      uint num602 = num600 + num297;
      uint num603 = num601 + (num602 < num297 ? 1U : 0U);
      long num604 = (long) num380 * 1162945305L;
      uint num605 = (uint) ((ulong) num604 >> 32);
      uint num606 = (uint) num604;
      uint num607 = num602 + num606;
      uint num608 = num605 + (num607 < num606 ? 1U : 0U);
      uint num609 = num603 + num608;
      uint num610 = num607 + num377;
      uint num611 = num609 + (num610 < num377 ? 1U : 0U);
      uint num612 = num610;
      uint num613 = num611;
      num379 = 0U;
      uint num614 = num613 + num380;
      ulong num615 = (ulong) num390 + 801750719UL * (ulong) num614;
      r.D[0] = (uint) (num615 & (ulong) uint.MaxValue);
      ulong num616 = (num615 >> 32) + ((ulong) num411 + 1076732275UL * (ulong) num614);
      r.D[1] = (uint) (num616 & (ulong) uint.MaxValue);
      ulong num617 = (num616 >> 32) + ((ulong) num444 + 1354194884UL * (ulong) num614);
      r.D[2] = (uint) (num617 & (ulong) uint.MaxValue);
      ulong num618 = (num617 >> 32) + ((ulong) num485 + 1162945305UL * (ulong) num614);
      r.D[3] = (uint) (num618 & (ulong) uint.MaxValue);
      ulong num619 = (num618 >> 32) + ((ulong) num531 + (ulong) num614);
      r.D[4] = (uint) (num619 & (ulong) uint.MaxValue);
      ulong num620 = (num619 >> 32) + (ulong) num569;
      r.D[5] = (uint) (num620 & (ulong) uint.MaxValue);
      ulong num621 = (num620 >> 32) + (ulong) num599;
      r.D[6] = (uint) (num621 & (ulong) uint.MaxValue);
      ulong num622 = (num621 >> 32) + (ulong) num612;
      r.D[7] = (uint) (num622 & (ulong) uint.MaxValue);
      bool isOverflow = num622 >> 32 > 0UL || Scalar.CheckOverflow(r);
      Scalar.Reduce(r, isOverflow);
    }

    private static void Reduce(Scalar r, bool isOverflow)
    {
      ulong num1 = isOverflow ? 1UL : 0UL;
      ulong num2 = (ulong) r.D[0] + num1 * 801750719UL;
      r.D[0] = (uint) (num2 & (ulong) uint.MaxValue);
      ulong num3 = (num2 >> 32) + ((ulong) r.D[1] + num1 * 1076732275UL);
      r.D[1] = (uint) (num3 & (ulong) uint.MaxValue);
      ulong num4 = (num3 >> 32) + ((ulong) r.D[2] + num1 * 1354194884UL);
      r.D[2] = (uint) (num4 & (ulong) uint.MaxValue);
      ulong num5 = (num4 >> 32) + ((ulong) r.D[3] + num1 * 1162945305UL);
      r.D[3] = (uint) (num5 & (ulong) uint.MaxValue);
      ulong num6 = (num5 >> 32) + ((ulong) r.D[4] + num1);
      r.D[4] = (uint) (num6 & (ulong) uint.MaxValue);
      ulong num7 = (num6 >> 32) + (ulong) r.D[5];
      r.D[5] = (uint) (num7 & (ulong) uint.MaxValue);
      ulong num8 = (num7 >> 32) + (ulong) r.D[6];
      r.D[6] = (uint) (num8 & (ulong) uint.MaxValue);
      ulong num9 = (num8 >> 32) + (ulong) r.D[7];
      r.D[7] = (uint) (num9 & (ulong) uint.MaxValue);
    }

    private static bool CheckOverflow(Scalar a)
    {
      bool flag1 = a.D[7] < uint.MaxValue || a.D[6] < uint.MaxValue || a.D[5] < uint.MaxValue || a.D[4] < 4294967294U;
      bool flag2 = a.D[4] > 4294967294U & !flag1;
      bool flag3 = flag1 | a.D[3] < 3132021990U & !flag2;
      bool flag4 = flag2 | a.D[3] > 3132021990U & !flag3;
      bool flag5 = flag3 | a.D[2] < 2940772411U & !flag4;
      bool flag6 = flag4 | a.D[2] > 2940772411U & !flag5;
      bool flag7 = flag5 | a.D[1] < 3218235020U & !flag6;
      return flag6 | a.D[1] > 3218235020U & !flag7 | a.D[0] >= 3493216577U & !flag7;
    }

    public static void Inverse(Scalar r, Scalar x)
    {
      Scalar scalar1 = new Scalar();
      Scalar.Sqr(scalar1, x);
      Scalar scalar2 = new Scalar();
      Scalar.Mul(scalar2, scalar1, x);
      Scalar scalar3 = new Scalar();
      Scalar.Mul(scalar3, scalar1, scalar2);
      Scalar scalar4 = new Scalar();
      Scalar.Mul(scalar4, scalar3, scalar1);
      Scalar scalar5 = new Scalar();
      Scalar.Mul(scalar5, scalar4, scalar1);
      Scalar scalar6 = new Scalar();
      Scalar.Mul(scalar6, scalar5, scalar1);
      Scalar scalar7 = new Scalar();
      Scalar.Mul(scalar7, scalar6, scalar1);
      Scalar scalar8 = new Scalar();
      Scalar.Sqr(scalar8, scalar7);
      Scalar.Sqr(scalar8, scalar8);
      Scalar.Mul(scalar8, scalar8, scalar6);
      Scalar scalar9 = new Scalar();
      Scalar.Sqr(scalar9, scalar8);
      Scalar.Sqr(scalar9, scalar9);
      Scalar.Mul(scalar9, scalar9, scalar2);
      Scalar scalar10 = new Scalar();
      Scalar.Sqr(scalar10, scalar9);
      for (int index = 0; index < 5; ++index)
        Scalar.Sqr(scalar10, scalar10);
      Scalar.Mul(scalar10, scalar10, scalar8);
      Scalar scalar11 = new Scalar();
      Scalar.Sqr(scalar11, scalar10);
      for (int index = 0; index < 13; ++index)
        Scalar.Sqr(scalar11, scalar11);
      Scalar.Mul(scalar11, scalar11, scalar10);
      Scalar scalar12 = new Scalar();
      Scalar.Sqr(scalar12, scalar11);
      for (int index = 0; index < 27; ++index)
        Scalar.Sqr(scalar12, scalar12);
      Scalar.Mul(scalar12, scalar12, scalar11);
      Scalar scalar13 = new Scalar();
      Scalar.Sqr(scalar13, scalar12);
      for (int index = 0; index < 55; ++index)
        Scalar.Sqr(scalar13, scalar13);
      Scalar.Mul(scalar13, scalar13, scalar12);
      Scalar scalar14 = new Scalar();
      Scalar.Sqr(scalar14, scalar13);
      for (int index = 0; index < 13; ++index)
        Scalar.Sqr(scalar14, scalar14);
      Scalar.Mul(scalar14, scalar14, scalar10);
      Scalar scalar15 = scalar14.Clone();
      for (int index = 0; index < 3; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar3);
      for (int index = 0; index < 4; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar4);
      for (int index = 0; index < 4; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar3);
      for (int index = 0; index < 5; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar6);
      for (int index = 0; index < 4; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar6);
      for (int index = 0; index < 4; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar4);
      for (int index = 0; index < 5; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar4);
      for (int index = 0; index < 6; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar7);
      for (int index = 0; index < 4; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar3);
      for (int index = 0; index < 3; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar4);
      for (int index = 0; index < 5; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar5);
      for (int index = 0; index < 6; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar3);
      for (int index = 0; index < 10; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar4);
      for (int index = 0; index < 4; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar4);
      for (int index = 0; index < 9; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar9);
      for (int index = 0; index < 5; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar5);
      for (int index = 0; index < 6; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar6);
      for (int index = 0; index < 4; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar7);
      for (int index = 0; index < 5; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar2);
      for (int index = 0; index < 6; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar7);
      for (int index = 0; index < 10; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar7);
      for (int index = 0; index < 4; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, scalar5);
      for (int index = 0; index < 6; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(scalar15, scalar15, x);
      for (int index = 0; index < 8; ++index)
        Scalar.Sqr(scalar15, scalar15);
      Scalar.Mul(r, scalar15, scalar8);
    }

    public static bool IsEven(Scalar a)
    {
      return (a.D[0] & 1U) < 1U;
    }

    public static void SetB32(Scalar r, byte[] b32, ref bool overflow)
    {
      bool flag = Scalar.SetB32(r, b32);
      if (!overflow)
        return;
      overflow = flag;
    }

    public static bool SetB32(Scalar r, byte[] b32)
    {
      r.D[0] = Util.BitToUInt32Invers(b32, 28);
      r.D[1] = Util.BitToUInt32Invers(b32, 24);
      r.D[2] = Util.BitToUInt32Invers(b32, 20);
      r.D[3] = Util.BitToUInt32Invers(b32, 16);
      r.D[4] = Util.BitToUInt32Invers(b32, 12);
      r.D[5] = Util.BitToUInt32Invers(b32, 8);
      r.D[6] = Util.BitToUInt32Invers(b32, 4);
      r.D[7] = Util.BitToUInt32Invers(b32, 0);
      bool isOverflow = Scalar.CheckOverflow(r);
      Scalar.Reduce(r, isOverflow);
      return isOverflow;
    }

    public static bool SetB32(Scalar r, byte[] b32, int index)
    {
      r.D[0] = Util.BitToUInt32Invers(b32, index + 28);
      r.D[1] = Util.BitToUInt32Invers(b32, index + 24);
      r.D[2] = Util.BitToUInt32Invers(b32, index + 20);
      r.D[3] = Util.BitToUInt32Invers(b32, index + 16);
      r.D[4] = Util.BitToUInt32Invers(b32, index + 12);
      r.D[5] = Util.BitToUInt32Invers(b32, index + 8);
      r.D[6] = Util.BitToUInt32Invers(b32, index + 4);
      r.D[7] = Util.BitToUInt32Invers(b32, index);
      bool isOverflow = Scalar.CheckOverflow(r);
      Scalar.Reduce(r, isOverflow);
      return isOverflow;
    }

    public uint GetBits(int offset, int count)
    {
      if (offset + count - 1 >> 5 != offset >> 5)
        throw new ArithmeticException();
      return this.D[offset >> 5] >> offset & (uint) ((1 << count) - 1);
    }

    public static void Clear(Scalar r)
    {
      r.D[0] = 0U;
      r.D[1] = 0U;
      r.D[2] = 0U;
      r.D[3] = 0U;
      r.D[4] = 0U;
      r.D[5] = 0U;
      r.D[6] = 0U;
      r.D[7] = 0U;
    }

    public void SetInt(uint v)
    {
      this.D[0] = v;
      this.D[1] = 0U;
      this.D[2] = 0U;
      this.D[3] = 0U;
      this.D[4] = 0U;
      this.D[5] = 0U;
      this.D[6] = 0U;
      this.D[7] = 0U;
    }

    public static byte[] GetB32(Scalar a)
    {
      byte[] bin = new byte[32];
      Scalar.GetB32(bin, 0, a);
      return bin;
    }

    public static void GetB32(byte[] bin, int index, Scalar a)
    {
      bin[index] = (byte) (a.D[7] >> 24);
      bin[index + 1] = (byte) (a.D[7] >> 16);
      bin[index + 2] = (byte) (a.D[7] >> 8);
      bin[index + 3] = (byte) a.D[7];
      bin[index + 4] = (byte) (a.D[6] >> 24);
      bin[index + 5] = (byte) (a.D[6] >> 16);
      bin[index + 6] = (byte) (a.D[6] >> 8);
      bin[index + 7] = (byte) a.D[6];
      bin[index + 8] = (byte) (a.D[5] >> 24);
      bin[index + 9] = (byte) (a.D[5] >> 16);
      bin[index + 10] = (byte) (a.D[5] >> 8);
      bin[index + 11] = (byte) a.D[5];
      bin[index + 12] = (byte) (a.D[4] >> 24);
      bin[index + 13] = (byte) (a.D[4] >> 16);
      bin[index + 14] = (byte) (a.D[4] >> 8);
      bin[index + 15] = (byte) a.D[4];
      bin[index + 16] = (byte) (a.D[3] >> 24);
      bin[index + 17] = (byte) (a.D[3] >> 16);
      bin[index + 18] = (byte) (a.D[3] >> 8);
      bin[index + 19] = (byte) a.D[3];
      bin[index + 20] = (byte) (a.D[2] >> 24);
      bin[index + 21] = (byte) (a.D[2] >> 16);
      bin[index + 22] = (byte) (a.D[2] >> 8);
      bin[index + 23] = (byte) a.D[2];
      bin[index + 24] = (byte) (a.D[1] >> 24);
      bin[index + 25] = (byte) (a.D[1] >> 16);
      bin[index + 26] = (byte) (a.D[1] >> 8);
      bin[index + 27] = (byte) a.D[1];
      bin[index + 28] = (byte) (a.D[0] >> 24);
      bin[index + 29] = (byte) (a.D[0] >> 16);
      bin[index + 30] = (byte) (a.D[0] >> 8);
      bin[index + 31] = (byte) a.D[0];
    }

    public static void Negate(Scalar r, Scalar a)
    {
      uint num1 = Scalar.IsZero(a) ? 0U : uint.MaxValue;
      ulong num2 = (ulong) ~a.D[0] + 3493216577UL + 1UL;
      r.D[0] = (uint) (num2 & (ulong) num1);
      ulong num3 = (num2 >> 32) + ((ulong) ~a.D[1] + 3218235020UL);
      r.D[1] = (uint) (num3 & (ulong) num1);
      ulong num4 = (num3 >> 32) + ((ulong) ~a.D[2] + 2940772411UL);
      r.D[2] = (uint) (num4 & (ulong) num1);
      ulong num5 = (num4 >> 32) + ((ulong) ~a.D[3] + 3132021990UL);
      r.D[3] = (uint) (num5 & (ulong) num1);
      ulong num6 = (num5 >> 32) + ((ulong) ~a.D[4] + 4294967294UL);
      r.D[4] = (uint) (num6 & (ulong) num1);
      ulong num7 = (num6 >> 32) + ((ulong) ~a.D[5] + (ulong) uint.MaxValue);
      r.D[5] = (uint) (num7 & (ulong) num1);
      ulong num8 = (num7 >> 32) + ((ulong) ~a.D[6] + (ulong) uint.MaxValue);
      r.D[6] = (uint) (num8 & (ulong) num1);
      ulong num9 = (num8 >> 32) + ((ulong) ~a.D[7] + (ulong) uint.MaxValue);
      r.D[7] = (uint) (num9 & (ulong) num1);
    }

    public static bool IsHigh(Scalar a)
    {
      bool flag1 = false;
      bool flag2 = false | a.D[7] < (uint) int.MaxValue;
      bool flag3 = flag1 | a.D[7] > (uint) int.MaxValue & !flag2;
      bool flag4 = flag2 | a.D[6] < uint.MaxValue & !flag3 | a.D[5] < uint.MaxValue & !flag3 | a.D[4] < uint.MaxValue & !flag3 | a.D[3] < 1566010995U & !flag3;
      bool flag5 = flag3 | a.D[3] > 1566010995U & !flag4;
      bool flag6 = flag4 | a.D[2] < 1470386205U & !flag5;
      bool flag7 = flag5 | a.D[2] > 1470386205U & !flag6;
      bool flag8 = flag6 | a.D[1] < 3756601158U & !flag7;
      return flag7 | a.D[1] > 3756601158U & !flag8 | a.D[0] > 1746608288U & !flag8;
    }

    private static void Sqr(Scalar r, Scalar a)
    {
      uint[] l = new uint[16];
      Scalar.Sqr512(l, a);
      Scalar.Reduce512(r, l);
    }

    private static void Sqr512(uint[] l, Scalar a)
    {
      uint num1 = 0;
      uint num2 = 0;
      int num3 = 0;
      long num4 = (long) a.D[0] * (long) a.D[0];
      uint num5 = (uint) ((ulong) num4 >> 32);
      uint num6 = (uint) num4;
      uint num7 = num1 + num6;
      uint num8 = num5 + (num7 < num6 ? 1U : 0U);
      uint num9 = num2 + num8;
      l[0] = num7;
      uint num10 = num9;
      uint num11 = 0;
      long num12 = (long) a.D[0] * (long) a.D[1];
      uint num13 = (uint) ((ulong) num12 >> 32);
      uint num14 = (uint) num12;
      uint num15 = num13 + num13;
      int num16 = num15 < num13 ? 1 : 0;
      int num17 = num3 + num16;
      uint num18 = num14 + num14;
      uint num19 = num15 + (num18 < num14 ? 1U : 0U);
      uint num20 = num10 + num18;
      uint num21 = num19 + (num20 < num18 ? 1U : 0U);
      int num22 = num20 < num18 & num21 == 0U ? 1 : 0;
      int num23 = num17 + num22;
      uint num24 = num11 + num21;
      int num25 = num24 < num21 ? 1 : 0;
      int num26 = num23 + num25;
      l[1] = num20;
      uint num27 = num24;
      uint num28 = (uint) num26;
      int num29 = 0;
      long num30 = (long) a.D[0] * (long) a.D[2];
      uint num31 = (uint) ((ulong) num30 >> 32);
      uint num32 = (uint) num30;
      uint num33 = num31 + num31;
      int num34 = num33 < num31 ? 1 : 0;
      int num35 = num29 + num34;
      uint num36 = num32 + num32;
      uint num37 = num33 + (num36 < num32 ? 1U : 0U);
      uint num38 = num27 + num36;
      uint num39 = num37 + (num38 < num36 ? 1U : 0U);
      int num40 = num38 < num36 & num39 == 0U ? 1 : 0;
      int num41 = num35 + num40;
      uint num42 = num28 + num39;
      int num43 = num42 < num39 ? 1 : 0;
      int num44 = num41 + num43;
      long num45 = (long) a.D[1] * (long) a.D[1];
      uint num46 = (uint) ((ulong) num45 >> 32);
      uint num47 = (uint) num45;
      uint num48 = num38 + num47;
      uint num49 = num46 + (num48 < num47 ? 1U : 0U);
      uint num50 = num42 + num49;
      int num51 = num50 < num49 ? 1 : 0;
      int num52 = num44 + num51;
      l[2] = num48;
      uint num53 = num50;
      uint num54 = (uint) num52;
      int num55 = 0;
      long num56 = (long) a.D[0] * (long) a.D[3];
      uint num57 = (uint) ((ulong) num56 >> 32);
      uint num58 = (uint) num56;
      uint num59 = num57 + num57;
      int num60 = num59 < num57 ? 1 : 0;
      int num61 = num55 + num60;
      uint num62 = num58 + num58;
      uint num63 = num59 + (num62 < num58 ? 1U : 0U);
      uint num64 = num53 + num62;
      uint num65 = num63 + (num64 < num62 ? 1U : 0U);
      int num66 = num64 < num62 & num65 == 0U ? 1 : 0;
      int num67 = num61 + num66;
      uint num68 = num54 + num65;
      int num69 = num68 < num65 ? 1 : 0;
      int num70 = num67 + num69;
      long num71 = (long) a.D[1] * (long) a.D[2];
      uint num72 = (uint) ((ulong) num71 >> 32);
      uint num73 = (uint) num71;
      uint num74 = num72 + num72;
      int num75 = num74 < num72 ? 1 : 0;
      int num76 = num70 + num75;
      uint num77 = num73 + num73;
      uint num78 = num74 + (num77 < num73 ? 1U : 0U);
      uint num79 = num64 + num77;
      uint num80 = num78 + (num79 < num77 ? 1U : 0U);
      int num81 = num79 < num77 & num80 == 0U ? 1 : 0;
      int num82 = num76 + num81;
      uint num83 = num68 + num80;
      int num84 = num83 < num80 ? 1 : 0;
      int num85 = num82 + num84;
      l[3] = num79;
      uint num86 = num83;
      uint num87 = (uint) num85;
      int num88 = 0;
      long num89 = (long) a.D[0] * (long) a.D[4];
      uint num90 = (uint) ((ulong) num89 >> 32);
      uint num91 = (uint) num89;
      uint num92 = num90 + num90;
      int num93 = num92 < num90 ? 1 : 0;
      int num94 = num88 + num93;
      uint num95 = num91 + num91;
      uint num96 = num92 + (num95 < num91 ? 1U : 0U);
      uint num97 = num86 + num95;
      uint num98 = num96 + (num97 < num95 ? 1U : 0U);
      int num99 = num97 < num95 & num98 == 0U ? 1 : 0;
      int num100 = num94 + num99;
      uint num101 = num87 + num98;
      int num102 = num101 < num98 ? 1 : 0;
      int num103 = num100 + num102;
      long num104 = (long) a.D[1] * (long) a.D[3];
      uint num105 = (uint) ((ulong) num104 >> 32);
      uint num106 = (uint) num104;
      uint num107 = num105 + num105;
      int num108 = num107 < num105 ? 1 : 0;
      int num109 = num103 + num108;
      uint num110 = num106 + num106;
      uint num111 = num107 + (num110 < num106 ? 1U : 0U);
      uint num112 = num97 + num110;
      uint num113 = num111 + (num112 < num110 ? 1U : 0U);
      int num114 = num112 < num110 & num113 == 0U ? 1 : 0;
      int num115 = num109 + num114;
      uint num116 = num101 + num113;
      int num117 = num116 < num113 ? 1 : 0;
      int num118 = num115 + num117;
      long num119 = (long) a.D[2] * (long) a.D[2];
      uint num120 = (uint) ((ulong) num119 >> 32);
      uint num121 = (uint) num119;
      uint num122 = num112 + num121;
      uint num123 = num120 + (num122 < num121 ? 1U : 0U);
      uint num124 = num116 + num123;
      int num125 = num124 < num123 ? 1 : 0;
      int num126 = num118 + num125;
      l[4] = num122;
      uint num127 = num124;
      uint num128 = (uint) num126;
      int num129 = 0;
      long num130 = (long) a.D[0] * (long) a.D[5];
      uint num131 = (uint) ((ulong) num130 >> 32);
      uint num132 = (uint) num130;
      uint num133 = num131 + num131;
      int num134 = num133 < num131 ? 1 : 0;
      int num135 = num129 + num134;
      uint num136 = num132 + num132;
      uint num137 = num133 + (num136 < num132 ? 1U : 0U);
      uint num138 = num127 + num136;
      uint num139 = num137 + (num138 < num136 ? 1U : 0U);
      int num140 = num138 < num136 & num139 == 0U ? 1 : 0;
      int num141 = num135 + num140;
      uint num142 = num128 + num139;
      int num143 = num142 < num139 ? 1 : 0;
      int num144 = num141 + num143;
      long num145 = (long) a.D[1] * (long) a.D[4];
      uint num146 = (uint) ((ulong) num145 >> 32);
      uint num147 = (uint) num145;
      uint num148 = num146 + num146;
      int num149 = num148 < num146 ? 1 : 0;
      int num150 = num144 + num149;
      uint num151 = num147 + num147;
      uint num152 = num148 + (num151 < num147 ? 1U : 0U);
      uint num153 = num138 + num151;
      uint num154 = num152 + (num153 < num151 ? 1U : 0U);
      int num155 = num153 < num151 & num154 == 0U ? 1 : 0;
      int num156 = num150 + num155;
      uint num157 = num142 + num154;
      int num158 = num157 < num154 ? 1 : 0;
      int num159 = num156 + num158;
      long num160 = (long) a.D[2] * (long) a.D[3];
      uint num161 = (uint) ((ulong) num160 >> 32);
      uint num162 = (uint) num160;
      uint num163 = num161 + num161;
      int num164 = num163 < num161 ? 1 : 0;
      int num165 = num159 + num164;
      uint num166 = num162 + num162;
      uint num167 = num163 + (num166 < num162 ? 1U : 0U);
      uint num168 = num153 + num166;
      uint num169 = num167 + (num168 < num166 ? 1U : 0U);
      int num170 = num168 < num166 & num169 == 0U ? 1 : 0;
      int num171 = num165 + num170;
      uint num172 = num157 + num169;
      int num173 = num172 < num169 ? 1 : 0;
      int num174 = num171 + num173;
      l[5] = num168;
      uint num175 = num172;
      uint num176 = (uint) num174;
      int num177 = 0;
      long num178 = (long) a.D[0] * (long) a.D[6];
      uint num179 = (uint) ((ulong) num178 >> 32);
      uint num180 = (uint) num178;
      uint num181 = num179 + num179;
      int num182 = num181 < num179 ? 1 : 0;
      int num183 = num177 + num182;
      uint num184 = num180 + num180;
      uint num185 = num181 + (num184 < num180 ? 1U : 0U);
      uint num186 = num175 + num184;
      uint num187 = num185 + (num186 < num184 ? 1U : 0U);
      int num188 = num186 < num184 & num187 == 0U ? 1 : 0;
      int num189 = num183 + num188;
      uint num190 = num176 + num187;
      int num191 = num190 < num187 ? 1 : 0;
      int num192 = num189 + num191;
      long num193 = (long) a.D[1] * (long) a.D[5];
      uint num194 = (uint) ((ulong) num193 >> 32);
      uint num195 = (uint) num193;
      uint num196 = num194 + num194;
      int num197 = num196 < num194 ? 1 : 0;
      int num198 = num192 + num197;
      uint num199 = num195 + num195;
      uint num200 = num196 + (num199 < num195 ? 1U : 0U);
      uint num201 = num186 + num199;
      uint num202 = num200 + (num201 < num199 ? 1U : 0U);
      int num203 = num201 < num199 & num202 == 0U ? 1 : 0;
      int num204 = num198 + num203;
      uint num205 = num190 + num202;
      int num206 = num205 < num202 ? 1 : 0;
      int num207 = num204 + num206;
      long num208 = (long) a.D[2] * (long) a.D[4];
      uint num209 = (uint) ((ulong) num208 >> 32);
      uint num210 = (uint) num208;
      uint num211 = num209 + num209;
      int num212 = num211 < num209 ? 1 : 0;
      int num213 = num207 + num212;
      uint num214 = num210 + num210;
      uint num215 = num211 + (num214 < num210 ? 1U : 0U);
      uint num216 = num201 + num214;
      uint num217 = num215 + (num216 < num214 ? 1U : 0U);
      int num218 = num216 < num214 & num217 == 0U ? 1 : 0;
      int num219 = num213 + num218;
      uint num220 = num205 + num217;
      int num221 = num220 < num217 ? 1 : 0;
      int num222 = num219 + num221;
      long num223 = (long) a.D[3] * (long) a.D[3];
      uint num224 = (uint) ((ulong) num223 >> 32);
      uint num225 = (uint) num223;
      uint num226 = num216 + num225;
      uint num227 = num224 + (num226 < num225 ? 1U : 0U);
      uint num228 = num220 + num227;
      int num229 = num228 < num227 ? 1 : 0;
      int num230 = num222 + num229;
      l[6] = num226;
      uint num231 = num228;
      uint num232 = (uint) num230;
      int num233 = 0;
      long num234 = (long) a.D[0] * (long) a.D[7];
      uint num235 = (uint) ((ulong) num234 >> 32);
      uint num236 = (uint) num234;
      uint num237 = num235 + num235;
      int num238 = num237 < num235 ? 1 : 0;
      int num239 = num233 + num238;
      uint num240 = num236 + num236;
      uint num241 = num237 + (num240 < num236 ? 1U : 0U);
      uint num242 = num231 + num240;
      uint num243 = num241 + (num242 < num240 ? 1U : 0U);
      int num244 = num242 < num240 & num243 == 0U ? 1 : 0;
      int num245 = num239 + num244;
      uint num246 = num232 + num243;
      int num247 = num246 < num243 ? 1 : 0;
      int num248 = num245 + num247;
      long num249 = (long) a.D[1] * (long) a.D[6];
      uint num250 = (uint) ((ulong) num249 >> 32);
      uint num251 = (uint) num249;
      uint num252 = num250 + num250;
      int num253 = num252 < num250 ? 1 : 0;
      int num254 = num248 + num253;
      uint num255 = num251 + num251;
      uint num256 = num252 + (num255 < num251 ? 1U : 0U);
      uint num257 = num242 + num255;
      uint num258 = num256 + (num257 < num255 ? 1U : 0U);
      int num259 = num257 < num255 & num258 == 0U ? 1 : 0;
      int num260 = num254 + num259;
      uint num261 = num246 + num258;
      int num262 = num261 < num258 ? 1 : 0;
      int num263 = num260 + num262;
      long num264 = (long) a.D[2] * (long) a.D[5];
      uint num265 = (uint) ((ulong) num264 >> 32);
      uint num266 = (uint) num264;
      uint num267 = num265 + num265;
      int num268 = num267 < num265 ? 1 : 0;
      int num269 = num263 + num268;
      uint num270 = num266 + num266;
      uint num271 = num267 + (num270 < num266 ? 1U : 0U);
      uint num272 = num257 + num270;
      uint num273 = num271 + (num272 < num270 ? 1U : 0U);
      int num274 = num272 < num270 & num273 == 0U ? 1 : 0;
      int num275 = num269 + num274;
      uint num276 = num261 + num273;
      int num277 = num276 < num273 ? 1 : 0;
      int num278 = num275 + num277;
      long num279 = (long) a.D[3] * (long) a.D[4];
      uint num280 = (uint) ((ulong) num279 >> 32);
      uint num281 = (uint) num279;
      uint num282 = num280 + num280;
      int num283 = num282 < num280 ? 1 : 0;
      int num284 = num278 + num283;
      uint num285 = num281 + num281;
      uint num286 = num282 + (num285 < num281 ? 1U : 0U);
      uint num287 = num272 + num285;
      uint num288 = num286 + (num287 < num285 ? 1U : 0U);
      int num289 = num287 < num285 & num288 == 0U ? 1 : 0;
      int num290 = num284 + num289;
      uint num291 = num276 + num288;
      int num292 = num291 < num288 ? 1 : 0;
      int num293 = num290 + num292;
      l[7] = num287;
      uint num294 = num291;
      uint num295 = (uint) num293;
      int num296 = 0;
      long num297 = (long) a.D[1] * (long) a.D[7];
      uint num298 = (uint) ((ulong) num297 >> 32);
      uint num299 = (uint) num297;
      uint num300 = num298 + num298;
      int num301 = num300 < num298 ? 1 : 0;
      int num302 = num296 + num301;
      uint num303 = num299 + num299;
      uint num304 = num300 + (num303 < num299 ? 1U : 0U);
      uint num305 = num294 + num303;
      uint num306 = num304 + (num305 < num303 ? 1U : 0U);
      int num307 = num305 < num303 & num306 == 0U ? 1 : 0;
      int num308 = num302 + num307;
      uint num309 = num295 + num306;
      int num310 = num309 < num306 ? 1 : 0;
      int num311 = num308 + num310;
      long num312 = (long) a.D[2] * (long) a.D[6];
      uint num313 = (uint) ((ulong) num312 >> 32);
      uint num314 = (uint) num312;
      uint num315 = num313 + num313;
      int num316 = num315 < num313 ? 1 : 0;
      int num317 = num311 + num316;
      uint num318 = num314 + num314;
      uint num319 = num315 + (num318 < num314 ? 1U : 0U);
      uint num320 = num305 + num318;
      uint num321 = num319 + (num320 < num318 ? 1U : 0U);
      int num322 = num320 < num318 & num321 == 0U ? 1 : 0;
      int num323 = num317 + num322;
      uint num324 = num309 + num321;
      int num325 = num324 < num321 ? 1 : 0;
      int num326 = num323 + num325;
      long num327 = (long) a.D[3] * (long) a.D[5];
      uint num328 = (uint) ((ulong) num327 >> 32);
      uint num329 = (uint) num327;
      uint num330 = num328 + num328;
      int num331 = num330 < num328 ? 1 : 0;
      int num332 = num326 + num331;
      uint num333 = num329 + num329;
      uint num334 = num330 + (num333 < num329 ? 1U : 0U);
      uint num335 = num320 + num333;
      uint num336 = num334 + (num335 < num333 ? 1U : 0U);
      int num337 = num335 < num333 & num336 == 0U ? 1 : 0;
      int num338 = num332 + num337;
      uint num339 = num324 + num336;
      int num340 = num339 < num336 ? 1 : 0;
      int num341 = num338 + num340;
      long num342 = (long) a.D[4] * (long) a.D[4];
      uint num343 = (uint) ((ulong) num342 >> 32);
      uint num344 = (uint) num342;
      uint num345 = num335 + num344;
      uint num346 = num343 + (num345 < num344 ? 1U : 0U);
      uint num347 = num339 + num346;
      int num348 = num347 < num346 ? 1 : 0;
      int num349 = num341 + num348;
      l[8] = num345;
      uint num350 = num347;
      uint num351 = (uint) num349;
      int num352 = 0;
      long num353 = (long) a.D[2] * (long) a.D[7];
      uint num354 = (uint) ((ulong) num353 >> 32);
      uint num355 = (uint) num353;
      uint num356 = num354 + num354;
      int num357 = num356 < num354 ? 1 : 0;
      int num358 = num352 + num357;
      uint num359 = num355 + num355;
      uint num360 = num356 + (num359 < num355 ? 1U : 0U);
      uint num361 = num350 + num359;
      uint num362 = num360 + (num361 < num359 ? 1U : 0U);
      int num363 = num361 < num359 & num362 == 0U ? 1 : 0;
      int num364 = num358 + num363;
      uint num365 = num351 + num362;
      int num366 = num365 < num362 ? 1 : 0;
      int num367 = num364 + num366;
      long num368 = (long) a.D[3] * (long) a.D[6];
      uint num369 = (uint) ((ulong) num368 >> 32);
      uint num370 = (uint) num368;
      uint num371 = num369 + num369;
      int num372 = num371 < num369 ? 1 : 0;
      int num373 = num367 + num372;
      uint num374 = num370 + num370;
      uint num375 = num371 + (num374 < num370 ? 1U : 0U);
      uint num376 = num361 + num374;
      uint num377 = num375 + (num376 < num374 ? 1U : 0U);
      int num378 = num376 < num374 & num377 == 0U ? 1 : 0;
      int num379 = num373 + num378;
      uint num380 = num365 + num377;
      int num381 = num380 < num377 ? 1 : 0;
      int num382 = num379 + num381;
      long num383 = (long) a.D[4] * (long) a.D[5];
      uint num384 = (uint) ((ulong) num383 >> 32);
      uint num385 = (uint) num383;
      uint num386 = num384 + num384;
      int num387 = num386 < num384 ? 1 : 0;
      int num388 = num382 + num387;
      uint num389 = num385 + num385;
      uint num390 = num386 + (num389 < num385 ? 1U : 0U);
      uint num391 = num376 + num389;
      uint num392 = num390 + (num391 < num389 ? 1U : 0U);
      int num393 = num391 < num389 & num392 == 0U ? 1 : 0;
      int num394 = num388 + num393;
      uint num395 = num380 + num392;
      int num396 = num395 < num392 ? 1 : 0;
      int num397 = num394 + num396;
      l[9] = num391;
      uint num398 = num395;
      uint num399 = (uint) num397;
      int num400 = 0;
      long num401 = (long) a.D[3] * (long) a.D[7];
      uint num402 = (uint) ((ulong) num401 >> 32);
      uint num403 = (uint) num401;
      uint num404 = num402 + num402;
      int num405 = num404 < num402 ? 1 : 0;
      int num406 = num400 + num405;
      uint num407 = num403 + num403;
      uint num408 = num404 + (num407 < num403 ? 1U : 0U);
      uint num409 = num398 + num407;
      uint num410 = num408 + (num409 < num407 ? 1U : 0U);
      int num411 = num409 < num407 & num410 == 0U ? 1 : 0;
      int num412 = num406 + num411;
      uint num413 = num399 + num410;
      int num414 = num413 < num410 ? 1 : 0;
      int num415 = num412 + num414;
      long num416 = (long) a.D[4] * (long) a.D[6];
      uint num417 = (uint) ((ulong) num416 >> 32);
      uint num418 = (uint) num416;
      uint num419 = num417 + num417;
      int num420 = num419 < num417 ? 1 : 0;
      int num421 = num415 + num420;
      uint num422 = num418 + num418;
      uint num423 = num419 + (num422 < num418 ? 1U : 0U);
      uint num424 = num409 + num422;
      uint num425 = num423 + (num424 < num422 ? 1U : 0U);
      int num426 = num424 < num422 & num425 == 0U ? 1 : 0;
      int num427 = num421 + num426;
      uint num428 = num413 + num425;
      int num429 = num428 < num425 ? 1 : 0;
      int num430 = num427 + num429;
      long num431 = (long) a.D[5] * (long) a.D[5];
      uint num432 = (uint) ((ulong) num431 >> 32);
      uint num433 = (uint) num431;
      uint num434 = num424 + num433;
      uint num435 = num432 + (num434 < num433 ? 1U : 0U);
      uint num436 = num428 + num435;
      int num437 = num436 < num435 ? 1 : 0;
      int num438 = num430 + num437;
      l[10] = num434;
      uint num439 = num436;
      uint num440 = (uint) num438;
      int num441 = 0;
      long num442 = (long) a.D[4] * (long) a.D[7];
      uint num443 = (uint) ((ulong) num442 >> 32);
      uint num444 = (uint) num442;
      uint num445 = num443 + num443;
      int num446 = num445 < num443 ? 1 : 0;
      int num447 = num441 + num446;
      uint num448 = num444 + num444;
      uint num449 = num445 + (num448 < num444 ? 1U : 0U);
      uint num450 = num439 + num448;
      uint num451 = num449 + (num450 < num448 ? 1U : 0U);
      int num452 = num450 < num448 & num451 == 0U ? 1 : 0;
      int num453 = num447 + num452;
      uint num454 = num440 + num451;
      int num455 = num454 < num451 ? 1 : 0;
      int num456 = num453 + num455;
      long num457 = (long) a.D[5] * (long) a.D[6];
      uint num458 = (uint) ((ulong) num457 >> 32);
      uint num459 = (uint) num457;
      uint num460 = num458 + num458;
      int num461 = num460 < num458 ? 1 : 0;
      int num462 = num456 + num461;
      uint num463 = num459 + num459;
      uint num464 = num460 + (num463 < num459 ? 1U : 0U);
      uint num465 = num450 + num463;
      uint num466 = num464 + (num465 < num463 ? 1U : 0U);
      int num467 = num465 < num463 & num466 == 0U ? 1 : 0;
      int num468 = num462 + num467;
      uint num469 = num454 + num466;
      int num470 = num469 < num466 ? 1 : 0;
      int num471 = num468 + num470;
      l[11] = num465;
      uint num472 = num469;
      uint num473 = (uint) num471;
      int num474 = 0;
      long num475 = (long) a.D[5] * (long) a.D[7];
      uint num476 = (uint) ((ulong) num475 >> 32);
      uint num477 = (uint) num475;
      uint num478 = num476 + num476;
      int num479 = num478 < num476 ? 1 : 0;
      int num480 = num474 + num479;
      uint num481 = num477 + num477;
      uint num482 = num478 + (num481 < num477 ? 1U : 0U);
      uint num483 = num472 + num481;
      uint num484 = num482 + (num483 < num481 ? 1U : 0U);
      int num485 = num483 < num481 & num484 == 0U ? 1 : 0;
      int num486 = num480 + num485;
      uint num487 = num473 + num484;
      int num488 = num487 < num484 ? 1 : 0;
      int num489 = num486 + num488;
      long num490 = (long) a.D[6] * (long) a.D[6];
      uint num491 = (uint) ((ulong) num490 >> 32);
      uint num492 = (uint) num490;
      uint num493 = num483 + num492;
      uint num494 = num491 + (num493 < num492 ? 1U : 0U);
      uint num495 = num487 + num494;
      int num496 = num495 < num494 ? 1 : 0;
      int num497 = num489 + num496;
      l[12] = num493;
      uint num498 = num495;
      uint num499 = (uint) num497;
      int num500 = 0;
      long num501 = (long) a.D[6] * (long) a.D[7];
      uint num502 = (uint) ((ulong) num501 >> 32);
      uint num503 = (uint) num501;
      uint num504 = num502 + num502;
      int num505 = num504 < num502 ? 1 : 0;
      int num506 = num500 + num505;
      uint num507 = num503 + num503;
      uint num508 = num504 + (num507 < num503 ? 1U : 0U);
      uint num509 = num498 + num507;
      uint num510 = num508 + (num509 < num507 ? 1U : 0U);
      int num511 = num509 < num507 & num510 == 0U ? 1 : 0;
      int num512 = num506 + num511;
      uint num513 = num499 + num510;
      int num514 = num513 < num510 ? 1 : 0;
      int num515 = num512 + num514;
      l[13] = num509;
      uint num516 = num513;
      uint num517 = (uint) num515;
      long num518 = (long) a.D[7] * (long) a.D[7];
      uint num519 = (uint) ((ulong) num518 >> 32);
      uint num520 = (uint) num518;
      uint num521 = num516 + num520;
      uint num522 = num519 + (num521 < num520 ? 1U : 0U);
      uint num523 = num517 + num522;
      l[14] = num521;
      uint num524 = num523;
      l[15] = num524;
    }
  }
}
